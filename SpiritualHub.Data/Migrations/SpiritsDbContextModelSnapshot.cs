// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SpiritualHub.Data;

#nullable disable

namespace SpiritualHub.Data.Migrations
{
    [DbContext(typeof(SpiritsDbContext))]
    partial class SpiritsDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.20")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("ApplicationUserAuthor", b =>
                {
                    b.Property<Guid>("FollowedAuthorsId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("FollowersId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("FollowedAuthorsId", "FollowersId");

                    b.HasIndex("FollowersId");

                    b.ToTable("ApplicationUserAuthor");
                });

            modelBuilder.Entity("ApplicationUserEvent", b =>
                {
                    b.Property<Guid>("JoinedEventsId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ParticipantsId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("JoinedEventsId", "ParticipantsId");

                    b.HasIndex("ParticipantsId");

                    b.ToTable("ApplicationUserEvent");
                });

            modelBuilder.Entity("ApplicationUserSubscription", b =>
                {
                    b.Property<Guid>("SubscribersId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("SubscriptionsId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("SubscribersId", "SubscriptionsId");

                    b.HasIndex("SubscriptionsId");

                    b.ToTable("ApplicationUserSubscription");
                });

            modelBuilder.Entity("AuthorPublisher", b =>
                {
                    b.Property<Guid>("PublishedAuthorsId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("PublishersId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("PublishedAuthorsId", "PublishersId");

                    b.HasIndex("PublishersId");

                    b.ToTable("AuthorPublisher");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("SpiritualHub.Data.Models.ApplicationUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("194974cd-73f0-4946-ba85-710d4061472d"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "06ca63e5-fba7-40ee-bddd-d82eca9e4ee6",
                            Email = "publisher@spirits.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "PUBLISHER@SPIRITS.COM",
                            NormalizedUserName = "PUBLISHER",
                            PasswordHash = "AQAAAAEAACcQAAAAEKqKNt/Y3SJd5fbAiWrWk1gz5IrawQ4nvHZ23mVoECOXXvjsh/neD/6P3Py2FBoxTg==",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "publisher"
                        },
                        new
                        {
                            Id = new Guid("1fd95f69-4f9d-4671-b126-cefcf4b8a95e"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "10490887-f13a-4ee7-99a2-687a12bbd68b",
                            Email = "user@mail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "USER@MAIL.COM",
                            NormalizedUserName = "USER",
                            PasswordHash = "AQAAAAEAACcQAAAAEH8DjtzPbVnCGPiNXahJAMuZzHnfxu1f+LT3eJIjLMkcFe2Ml6X2pZV36W1dZSFLBw==",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "user"
                        });
                });

            modelBuilder.Entity("SpiritualHub.Data.Models.Author", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Alias")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<Guid>("AvatarImageID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("CategoryID")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("Id");

                    b.HasIndex("AvatarImageID");

                    b.HasIndex("CategoryID");

                    b.ToTable("Authors");

                    b.HasData(
                        new
                        {
                            Id = new Guid("47383fe7-f3e1-4d22-8180-5bfaa76955f5"),
                            Alias = "Bashar",
                            AvatarImageID = new Guid("2a022e06-8c00-435f-93a9-9da816c1b483"),
                            CategoryID = 2,
                            Name = "Darryl Anka"
                        },
                        new
                        {
                            Id = new Guid("240ae09a-7f04-45e5-ac42-bf5311e1c4a8"),
                            Alias = "Cogitality",
                            AvatarImageID = new Guid("868aaede-674a-44a6-ae21-ec62bd2bec3b"),
                            CategoryID = 3,
                            Name = "Cogitality Academy"
                        },
                        new
                        {
                            Id = new Guid("8c8bd426-2974-4bad-aa33-0e045ca86a54"),
                            Alias = "Eckhart Tolle",
                            AvatarImageID = new Guid("26db05ea-2b5e-44dd-bdef-4e74b9ecaa5f"),
                            CategoryID = 5,
                            Name = "Eckhart Tolle"
                        });
                });

            modelBuilder.Entity("SpiritualHub.Data.Models.Blog", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AuthorID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("CategoryID")
                        .HasColumnType("int");

                    b.Property<Guid>("PublisherID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ShortDescription")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("AuthorID");

                    b.HasIndex("CategoryID");

                    b.HasIndex("PublisherID");

                    b.ToTable("Blogs");
                });

            modelBuilder.Entity("SpiritualHub.Data.Models.Book", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AuthorID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("CategoryID")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("ImageID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(10,5)");

                    b.Property<Guid>("PublisherID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ShortDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.HasKey("Id");

                    b.HasIndex("AuthorID");

                    b.HasIndex("CategoryID");

                    b.HasIndex("ImageID");

                    b.HasIndex("PublisherID");

                    b.ToTable("Books");

                    b.HasData(
                        new
                        {
                            Id = new Guid("e0aa1a89-c180-4ac0-935d-8efab304b274"),
                            AuthorID = new Guid("240ae09a-7f04-45e5-ac42-bf5311e1c4a8"),
                            CategoryID = 3,
                            Description = "All the facts, in the beginning, were puzzle pieces, scattered in vastness - fragmented, incongruous, unordered. They arrived haphazardly in moments when you weren't seeking them and not expecting them... Flashes, illuminating the darkness, which it is fitting to capture in your hands like fireflies - to gather them with patience, inspiration, and dedication. Then, embracing the scattered chaos of your own ignorance, with faith in the Nothingness, you arrange the light of your own Life.",
                            ImageID = new Guid("c7b99bd1-8188-4277-b937-81ab367b4034"),
                            Price = 30m,
                            PublisherID = new Guid("00000000-0000-0000-0000-000000000000"),
                            ShortDescription = "Bundle of the books You - The Source, You - The Manifestation, You - The Life",
                            Title = "Encyclopedia Cogitality"
                        },
                        new
                        {
                            Id = new Guid("12221379-d5c7-4688-8ad8-efbffcaf8d06"),
                            AuthorID = new Guid("47383fe7-f3e1-4d22-8180-5bfaa76955f5"),
                            CategoryID = 2,
                            Description = "All the facts, in the beginning, were puzzle pieces, scattered in vastness - fragmented, incongruous, unordered. They arrived haphazardly in moments when you weren't seeking them and not expecting them... Flashes, illuminating the darkness, which it is fitting to capture in your hands like fireflies - to gather them with patience, inspiration, and dedication. Then, embracing the scattered chaos of your own ignorance, with faith in the Nothingness, you arrange the light of your own Life.",
                            ImageID = new Guid("c7b99bd1-8188-4277-b937-81ab367b4034"),
                            Price = 30m,
                            PublisherID = new Guid("00000000-0000-0000-0000-000000000000"),
                            ShortDescription = "Bundle of the books You - The Source, You - The Manifestation, You - The Life",
                            Title = "The Masters of Limitation"
                        },
                        new
                        {
                            Id = new Guid("641ae624-efd0-4eb6-87af-05f2cc17bbb7"),
                            AuthorID = new Guid("8c8bd426-2974-4bad-aa33-0e045ca86a54"),
                            CategoryID = 5,
                            Description = "It's no wonder that The Power of Now has sold over 2 million copies worldwide and has been translated into over 30 foreign languages. Much more than simple principles and platitudes, the book takes readers on an inspiring spiritual journey to find their true and deepest self and reach the ultimate in personal growth and spirituality: the discovery of truth and light.\r\r\n\r\r\nIn the first chapter, Tolle introduces readers to enlightenment and its natural enemy, the mind. He awakens readers to their role as a creator of pain and shows them how to have a pain-free identity by living fully in the present. The journey is thrilling, and along the way, the author shows how to connect to the indestructible essence of our Being, \"the eternal, ever-present One Life beyond the myriad forms of life that are subject to birth and death.\"\r\r\n\r\r\nFeaturing a new preface by the author, this paperback shows that only after regaining awareness of Being, liberated from Mind and intensely in the Now, is there Enlightenment.",
                            ImageID = new Guid("327b0419-5ff9-4694-a4f8-151cb0a46e6b"),
                            Price = 30m,
                            PublisherID = new Guid("00000000-0000-0000-0000-000000000000"),
                            ShortDescription = "This book shows that only after regaining awareness of Being, liberated from Mind and intensely in the Now, is there Enlightenment",
                            Title = "The Power Of Now"
                        });
                });

            modelBuilder.Entity("SpiritualHub.Data.Models.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Esoteric"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Channeling"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Scientific"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Religious"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Spiritual"
                        },
                        new
                        {
                            Id = 6,
                            Name = "Hindu"
                        });
                });

            modelBuilder.Entity("SpiritualHub.Data.Models.Comment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("AuthorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("PostID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<Guid>("UserID")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("AuthorId");

                    b.HasIndex("PostID");

                    b.HasIndex("UserID");

                    b.ToTable("Comments");
                });

            modelBuilder.Entity("SpiritualHub.Data.Models.Course", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AuthorID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("CategoryID")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(10,5)");

                    b.Property<Guid>("PublisherID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ShortDescription")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("AuthorID");

                    b.HasIndex("CategoryID");

                    b.HasIndex("PublisherID");

                    b.ToTable("Courses");
                });

            modelBuilder.Entity("SpiritualHub.Data.Models.Event", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AutorID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("CategoryID")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("EndDateTime")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("ImageID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsOnline")
                        .HasColumnType("bit");

                    b.Property<Guid>("OrganizerID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(10,5)");

                    b.Property<DateTime>("StartDateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("AutorID");

                    b.HasIndex("CategoryID");

                    b.HasIndex("ImageID");

                    b.HasIndex("OrganizerID");

                    b.ToTable("Events");

                    b.HasData(
                        new
                        {
                            Id = new Guid("15f326bc-f47f-487f-8764-5fb8fd5c448a"),
                            AutorID = new Guid("47383fe7-f3e1-4d22-8180-5bfaa76955f5"),
                            CategoryID = 2,
                            CreatedOn = new DateTime(2023, 8, 4, 13, 7, 52, 752, DateTimeKind.Utc).AddTicks(2990),
                            Description = "What if there was one state of being we could adopt that would help us establish better, stronger connections not only with our families and friends on earth, but also with our friends from the stars?\r\r\n\r\r\nIn The Three Behaviors of Connection, Bashar will share how action, timing, and communication are vital concepts for making inroads and connection with the hybrid children that will eventually be living among us. He will expand in detail on these three behaviors and how we might apply them to our lives on Earth as well as to our quest for contact with our extraterrestrial family.",
                            EndDateTime = new DateTime(2023, 8, 26, 15, 30, 0, 0, DateTimeKind.Unspecified),
                            ImageID = new Guid("69630e42-a4de-4116-a1a4-38c43faa0b53"),
                            IsOnline = true,
                            OrganizerID = new Guid("00000000-0000-0000-0000-000000000000"),
                            Price = 35m,
                            StartDateTime = new DateTime(2023, 8, 26, 14, 30, 0, 0, DateTimeKind.Unspecified),
                            Title = "The 3 Behaviors of Connection"
                        },
                        new
                        {
                            Id = new Guid("45bb1c09-b50d-4d47-8fdb-fbfb53086922"),
                            AutorID = new Guid("8c8bd426-2974-4bad-aa33-0e045ca86a54"),
                            CategoryID = 5,
                            CreatedOn = new DateTime(2023, 8, 4, 13, 7, 52, 752, DateTimeKind.Utc).AddTicks(3006),
                            Description = "Join us for this unique opportunity to sit with Eckhart Tolle as he points you to spiritual awakening and the transformation of consciousness. With his hallmark warmth, humour and compassion, this evening will connect you with the peace and serenity that arises from living in the moment.\r\r\n\r\r\nEckhart’s profound, yet simple teachings have helped countless people from around the globe awaken to a vibrantly alive inner peace in their daily lives. Eckhart Tolle’s writings and life-changing public events have touched millions of lives, garnering fans to the likes of Oprah, the Dalai Lama and Deepak Chopra. He is the best-selling author of The Power of Now and A New Earth that are widely regarded as the most transformational books of our time.",
                            EndDateTime = new DateTime(2023, 9, 26, 22, 0, 0, 0, DateTimeKind.Unspecified),
                            ImageID = new Guid("13e26f61-5a34-44e0-b9d4-d8ab04b8f342"),
                            IsOnline = false,
                            OrganizerID = new Guid("00000000-0000-0000-0000-000000000000"),
                            Price = 199m,
                            StartDateTime = new DateTime(2023, 9, 26, 18, 30, 0, 0, DateTimeKind.Unspecified),
                            Title = "An Evening with Eckhart Tolle in Stockholm"
                        },
                        new
                        {
                            Id = new Guid("3db097df-7c7c-4c4e-b546-d4555c4c1521"),
                            AutorID = new Guid("240ae09a-7f04-45e5-ac42-bf5311e1c4a8"),
                            CategoryID = 3,
                            CreatedOn = new DateTime(2023, 8, 4, 13, 7, 52, 752, DateTimeKind.Utc).AddTicks(3059),
                            Description = "The Cogitality seminars are back - they have already started in the country, and now they are happening at the \"Healing\" campus too! They are pre-planned and organized by the team of cogitalists.\r\r\n\r\r\nThe first seminar at the \"Healing\" campus, which will take place on September 2-3, 2023, is already fully booked. Thank you for the sincere desire to share this experience together!",
                            EndDateTime = new DateTime(2023, 9, 3, 18, 0, 0, 0, DateTimeKind.Unspecified),
                            ImageID = new Guid("ab7cfc34-55f4-4ed8-9687-c48a747e9fb4"),
                            IsOnline = true,
                            OrganizerID = new Guid("00000000-0000-0000-0000-000000000000"),
                            Price = 144m,
                            StartDateTime = new DateTime(2023, 9, 2, 9, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "Seminar - Campus \"Healing\""
                        });
                });

            modelBuilder.Entity("SpiritualHub.Data.Models.Image", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("BlogId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CourseId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("URL")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("BlogId");

                    b.HasIndex("CourseId");

                    b.ToTable("Images");

                    b.HasData(
                        new
                        {
                            Id = new Guid("2a022e06-8c00-435f-93a9-9da816c1b483"),
                            Name = "BasharAvatar",
                            URL = "https://1drv.ms/i/s!AtAU7bartlmmgYQEO5c530QekMydnA?e=65X6RK"
                        },
                        new
                        {
                            Id = new Guid("868aaede-674a-44a6-ae21-ec62bd2bec3b"),
                            Name = "CogitalityAvatar",
                            URL = "https://1drv.ms/i/s!AtAU7bartlmmgYRw6O57eiKsf9iNBQ?e=OsdWqo"
                        },
                        new
                        {
                            Id = new Guid("26db05ea-2b5e-44dd-bdef-4e74b9ecaa5f"),
                            Name = "EckhartTolleAvatar",
                            URL = "https://1drv.ms/i/s!AtAU7bartlmmhpxwLMTJsLUEHxnZSQ?e=sln5JF"
                        },
                        new
                        {
                            Id = new Guid("ab7cfc34-55f4-4ed8-9687-c48a747e9fb4"),
                            Name = "HealningSeminar",
                            URL = "https://kogitalnost.net/wp-content/uploads/2023/07/FINALL-Kogitalnost-2-3-09-2023-copy-1024x536.webp"
                        },
                        new
                        {
                            Id = new Guid("13e26f61-5a34-44e0-b9d4-d8ab04b8f342"),
                            Name = "An-Evening-with-Eckhart-Tolle-in-Stockholm",
                            URL = "https://eckharttolle.com/wp-content/uploads/2023/02/Waterfront_november_2019-2048x1460.jpg"
                        },
                        new
                        {
                            Id = new Guid("69630e42-a4de-4116-a1a4-38c43faa0b53"),
                            Name = "The-Three-Behaviors-of-Connection",
                            URL = "https://www.bashar.org/wp-content/uploads/2023/07/THREE-BEHAVIOURS_NEWSPAGE1-1024x576.jpg"
                        },
                        new
                        {
                            Id = new Guid("c7b99bd1-8188-4277-b937-81ab367b4034"),
                            Name = "EC",
                            URL = "https://kogitalnost.net/wp-content/uploads/2023/06/3-te-knigi-1.webp"
                        },
                        new
                        {
                            Id = new Guid("327b0419-5ff9-4694-a4f8-151cb0a46e6b"),
                            Name = "PowerOfNow",
                            URL = "https://1drv.ms/i/s!AtAU7bartlmmhp15puF4kOZMXXn-9w?e=fZECnk"
                        },
                        new
                        {
                            Id = new Guid("55dc2c91-c81b-40de-ac5b-f7474a7acfdc"),
                            Name = "MOL",
                            URL = "https://1drv.ms/i/s!AtAU7bartlmmhp17o6bOmIyxERpgkQ?e=bWhmAO"
                        });
                });

            modelBuilder.Entity("SpiritualHub.Data.Models.Publisher", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<Guid>("UserID")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserID");

                    b.ToTable("Publishers");

                    b.HasData(
                        new
                        {
                            Id = new Guid("d99242d9-3db2-4675-87e3-da7743c6b526"),
                            PhoneNumber = "+359888888888",
                            UserID = new Guid("194974cd-73f0-4946-ba85-710d4061472d")
                        });
                });

            modelBuilder.Entity("SpiritualHub.Data.Models.Rating", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AuthorID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("BookID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CourseID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("EventID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Stars")
                        .HasColumnType("int");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserID")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("AuthorID");

                    b.HasIndex("BookID");

                    b.HasIndex("CourseID");

                    b.HasIndex("EventID");

                    b.HasIndex("UserID");

                    b.ToTable("Ratings");
                });

            modelBuilder.Entity("SpiritualHub.Data.Models.Subscription", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AuthorID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(10,5)");

                    b.Property<int>("SubscriptionTypeID")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AuthorID");

                    b.HasIndex("SubscriptionTypeID");

                    b.ToTable("Subscriptions");
                });

            modelBuilder.Entity("SpiritualHub.Data.Models.SubscriptionType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("SubscriptionTypes");

                    b.HasCheckConstraint("CK__PossibleTypes", "Type = 'Monthly' OR Type = 'Quarterly' OR Type = 'Annual'");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Type = "Monthly"
                        },
                        new
                        {
                            Id = 2,
                            Type = "Quarterly"
                        },
                        new
                        {
                            Id = 3,
                            Type = "Annual"
                        });
                });

            modelBuilder.Entity("ApplicationUserAuthor", b =>
                {
                    b.HasOne("SpiritualHub.Data.Models.Author", null)
                        .WithMany()
                        .HasForeignKey("FollowedAuthorsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SpiritualHub.Data.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("FollowersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ApplicationUserEvent", b =>
                {
                    b.HasOne("SpiritualHub.Data.Models.Event", null)
                        .WithMany()
                        .HasForeignKey("JoinedEventsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SpiritualHub.Data.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("ParticipantsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ApplicationUserSubscription", b =>
                {
                    b.HasOne("SpiritualHub.Data.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("SubscribersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SpiritualHub.Data.Models.Subscription", null)
                        .WithMany()
                        .HasForeignKey("SubscriptionsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("AuthorPublisher", b =>
                {
                    b.HasOne("SpiritualHub.Data.Models.Author", null)
                        .WithMany()
                        .HasForeignKey("PublishedAuthorsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SpiritualHub.Data.Models.Publisher", null)
                        .WithMany()
                        .HasForeignKey("PublishersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.HasOne("SpiritualHub.Data.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.HasOne("SpiritualHub.Data.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SpiritualHub.Data.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.HasOne("SpiritualHub.Data.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SpiritualHub.Data.Models.Author", b =>
                {
                    b.HasOne("SpiritualHub.Data.Models.Image", "AvatarImage")
                        .WithMany()
                        .HasForeignKey("AvatarImageID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SpiritualHub.Data.Models.Category", "Category")
                        .WithMany("Authors")
                        .HasForeignKey("CategoryID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("AvatarImage");

                    b.Navigation("Category");
                });

            modelBuilder.Entity("SpiritualHub.Data.Models.Blog", b =>
                {
                    b.HasOne("SpiritualHub.Data.Models.Author", "Author")
                        .WithMany("Blogs")
                        .HasForeignKey("AuthorID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SpiritualHub.Data.Models.Category", "Category")
                        .WithMany("Blogs")
                        .HasForeignKey("CategoryID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SpiritualHub.Data.Models.Publisher", "Publisher")
                        .WithMany("Blogs")
                        .HasForeignKey("PublisherID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Author");

                    b.Navigation("Category");

                    b.Navigation("Publisher");
                });

            modelBuilder.Entity("SpiritualHub.Data.Models.Book", b =>
                {
                    b.HasOne("SpiritualHub.Data.Models.Author", "Author")
                        .WithMany("Books")
                        .HasForeignKey("AuthorID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SpiritualHub.Data.Models.Category", "Category")
                        .WithMany("Books")
                        .HasForeignKey("CategoryID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SpiritualHub.Data.Models.Image", "Image")
                        .WithMany()
                        .HasForeignKey("ImageID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SpiritualHub.Data.Models.Publisher", "Publisher")
                        .WithMany("Books")
                        .HasForeignKey("PublisherID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Author");

                    b.Navigation("Category");

                    b.Navigation("Image");

                    b.Navigation("Publisher");
                });

            modelBuilder.Entity("SpiritualHub.Data.Models.Comment", b =>
                {
                    b.HasOne("SpiritualHub.Data.Models.Author", null)
                        .WithMany("Comments")
                        .HasForeignKey("AuthorId");

                    b.HasOne("SpiritualHub.Data.Models.Blog", "Post")
                        .WithMany("Comments")
                        .HasForeignKey("PostID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("SpiritualHub.Data.Models.ApplicationUser", "User")
                        .WithMany("Comments")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Post");

                    b.Navigation("User");
                });

            modelBuilder.Entity("SpiritualHub.Data.Models.Course", b =>
                {
                    b.HasOne("SpiritualHub.Data.Models.Author", "Author")
                        .WithMany("Courses")
                        .HasForeignKey("AuthorID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SpiritualHub.Data.Models.Category", "Category")
                        .WithMany("Courses")
                        .HasForeignKey("CategoryID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SpiritualHub.Data.Models.Publisher", "Publisher")
                        .WithMany("Courses")
                        .HasForeignKey("PublisherID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Author");

                    b.Navigation("Category");

                    b.Navigation("Publisher");
                });

            modelBuilder.Entity("SpiritualHub.Data.Models.Event", b =>
                {
                    b.HasOne("SpiritualHub.Data.Models.Author", "Author")
                        .WithMany("Events")
                        .HasForeignKey("AutorID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SpiritualHub.Data.Models.Category", "Category")
                        .WithMany("Events")
                        .HasForeignKey("CategoryID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SpiritualHub.Data.Models.Image", "Image")
                        .WithMany()
                        .HasForeignKey("ImageID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SpiritualHub.Data.Models.Publisher", "Organizer")
                        .WithMany("Events")
                        .HasForeignKey("OrganizerID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Author");

                    b.Navigation("Category");

                    b.Navigation("Image");

                    b.Navigation("Organizer");
                });

            modelBuilder.Entity("SpiritualHub.Data.Models.Image", b =>
                {
                    b.HasOne("SpiritualHub.Data.Models.Blog", null)
                        .WithMany("Images")
                        .HasForeignKey("BlogId");

                    b.HasOne("SpiritualHub.Data.Models.Course", null)
                        .WithMany("Images")
                        .HasForeignKey("CourseId");
                });

            modelBuilder.Entity("SpiritualHub.Data.Models.Publisher", b =>
                {
                    b.HasOne("SpiritualHub.Data.Models.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("SpiritualHub.Data.Models.Rating", b =>
                {
                    b.HasOne("SpiritualHub.Data.Models.Author", "Author")
                        .WithMany("Ratings")
                        .HasForeignKey("AuthorID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("SpiritualHub.Data.Models.Book", "Book")
                        .WithMany("Ratings")
                        .HasForeignKey("BookID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("SpiritualHub.Data.Models.Course", "Course")
                        .WithMany("Ratings")
                        .HasForeignKey("CourseID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("SpiritualHub.Data.Models.Event", "Event")
                        .WithMany("Ratings")
                        .HasForeignKey("EventID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("SpiritualHub.Data.Models.ApplicationUser", "User")
                        .WithMany("Ratings")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Author");

                    b.Navigation("Book");

                    b.Navigation("Course");

                    b.Navigation("Event");

                    b.Navigation("User");
                });

            modelBuilder.Entity("SpiritualHub.Data.Models.Subscription", b =>
                {
                    b.HasOne("SpiritualHub.Data.Models.Author", "Author")
                        .WithMany("Subscriptions")
                        .HasForeignKey("AuthorID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("SpiritualHub.Data.Models.SubscriptionType", "SubscriptionType")
                        .WithMany("Subscriptions")
                        .HasForeignKey("SubscriptionTypeID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Author");

                    b.Navigation("SubscriptionType");
                });

            modelBuilder.Entity("SpiritualHub.Data.Models.ApplicationUser", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("Ratings");
                });

            modelBuilder.Entity("SpiritualHub.Data.Models.Author", b =>
                {
                    b.Navigation("Blogs");

                    b.Navigation("Books");

                    b.Navigation("Comments");

                    b.Navigation("Courses");

                    b.Navigation("Events");

                    b.Navigation("Ratings");

                    b.Navigation("Subscriptions");
                });

            modelBuilder.Entity("SpiritualHub.Data.Models.Blog", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("Images");
                });

            modelBuilder.Entity("SpiritualHub.Data.Models.Book", b =>
                {
                    b.Navigation("Ratings");
                });

            modelBuilder.Entity("SpiritualHub.Data.Models.Category", b =>
                {
                    b.Navigation("Authors");

                    b.Navigation("Blogs");

                    b.Navigation("Books");

                    b.Navigation("Courses");

                    b.Navigation("Events");
                });

            modelBuilder.Entity("SpiritualHub.Data.Models.Course", b =>
                {
                    b.Navigation("Images");

                    b.Navigation("Ratings");
                });

            modelBuilder.Entity("SpiritualHub.Data.Models.Event", b =>
                {
                    b.Navigation("Ratings");
                });

            modelBuilder.Entity("SpiritualHub.Data.Models.Publisher", b =>
                {
                    b.Navigation("Blogs");

                    b.Navigation("Books");

                    b.Navigation("Courses");

                    b.Navigation("Events");
                });

            modelBuilder.Entity("SpiritualHub.Data.Models.SubscriptionType", b =>
                {
                    b.Navigation("Subscriptions");
                });
#pragma warning restore 612, 618
        }
    }
}
